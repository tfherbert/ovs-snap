
Also, removes an unused function

Signed-off-by: Daniele Di Proietto <diproiettod at vmware.com <http://openvswitch.org/mailman/listinfo/dev>>
---
 lib/dp-packet.h | 230 ++++++++++++++++++++++++++++++++------------------------
 1 file changed, 131 insertions(+), 99 deletions(-)

diff --git a/lib/dp-packet.h b/lib/dp-packet.h
index 1d10d99..e4c2593 100644
--- a/lib/dp-packet.h
+++ b/lib/dp-packet.h
@@ -33,7 +33,7 @@ enum OVS_PACKED_ENUM dp_packet_source {
     DPBUF_STACK,               /* Un-movable stack space or static buffer. */
     DPBUF_STUB,                /* Starts on stack, may expand into heap. */
     DPBUF_DPDK,                /* buffer data is from DPDK allocated memory.
-                                  ref to build_dp_packet() in netdev-dpdk. */
+                                * ref to build_dp_packet() in netdev-dpdk. */
 };
 
 /* Buffer for holding packet data.  A dp_packet is automatically reallocated
@@ -60,9 +60,9 @@ struct dp_packet {
     struct pkt_metadata md;
 };
 
-static inline void * dp_packet_data(const struct dp_packet *);
+static inline void *dp_packet_data(const struct dp_packet *);
 static inline void dp_packet_set_data(struct dp_packet *, void *);
-static inline void * dp_packet_base(const struct dp_packet *);
+static inline void *dp_packet_base(const struct dp_packet *);
 static inline void dp_packet_set_base(struct dp_packet *, void *);
 
 static inline uint32_t dp_packet_size(const struct dp_packet *);
@@ -71,17 +71,17 @@ static inline void dp_packet_set_size(struct dp_packet *, uint32_t);
 static inline uint16_t dp_packet_get_allocated(const struct dp_packet *);
 static inline void dp_packet_set_allocated(struct dp_packet *, uint16_t);
 
-void * dp_packet_resize_l2(struct dp_packet *, int increment);
-void * dp_packet_resize_l2_5(struct dp_packet *, int increment);
-static inline void * dp_packet_l2(const struct dp_packet *);
+void *dp_packet_resize_l2(struct dp_packet *, int increment);
+void *dp_packet_resize_l2_5(struct dp_packet *, int increment);
+static inline void *dp_packet_l2(const struct dp_packet *);
 static inline void dp_packet_reset_offsets(struct dp_packet *);
 static inline uint8_t dp_packet_l2_pad_size(const struct dp_packet *);
 static inline void dp_packet_set_l2_pad_size(struct dp_packet *, uint8_t);
-static inline void * dp_packet_l2_5(const struct dp_packet *);
+static inline void *dp_packet_l2_5(const struct dp_packet *);
 static inline void dp_packet_set_l2_5(struct dp_packet *, void *);
-static inline void * dp_packet_l3(const struct dp_packet *);
+static inline void *dp_packet_l3(const struct dp_packet *);
 static inline void dp_packet_set_l3(struct dp_packet *, void *);
-static inline void * dp_packet_l4(const struct dp_packet *);
+static inline void *dp_packet_l4(const struct dp_packet *);
 static inline void dp_packet_set_l4(struct dp_packet *, void *);
 static inline size_t dp_packet_l4_size(const struct dp_packet *);
 static inline const void *dp_packet_get_tcp_payload(const struct dp_packet *);
@@ -94,26 +94,25 @@ void dp_packet_use(struct dp_packet *, void *, size_t);
 void dp_packet_use_stub(struct dp_packet *, void *, size_t);
 void dp_packet_use_const(struct dp_packet *, const void *, size_t);
 
-void dp_packet_init_dpdk(struct dp_packet *b, size_t allocated);
+void dp_packet_init_dpdk(struct dp_packet *, size_t allocated);
 
 void dp_packet_init(struct dp_packet *, size_t);
 void dp_packet_uninit(struct dp_packet *);
-static inline void *dp_packet_get_uninit_pointer(struct dp_packet *);
 
 struct dp_packet *dp_packet_new(size_t);
 struct dp_packet *dp_packet_new_with_headroom(size_t, size_t headroom);
 struct dp_packet *dp_packet_clone(const struct dp_packet *);
 struct dp_packet *dp_packet_clone_with_headroom(const struct dp_packet *,
-                                          size_t headroom);
+                                                size_t headroom);
 struct dp_packet *dp_packet_clone_data(const void *, size_t);
 struct dp_packet *dp_packet_clone_data_with_headroom(const void *, size_t,
-                                               size_t headroom);
+                                                     size_t headroom);
 static inline void dp_packet_delete(struct dp_packet *);
 
 static inline void *dp_packet_at(const struct dp_packet *, size_t offset,
-                              size_t size);
-static inline void *dp_packet_at_assert(const struct dp_packet *, size_t offset,
-                                     size_t size);
+                                 size_t size);
+static inline void *dp_packet_at_assert(const struct dp_packet *,
+                                        size_t offset, size_t size);
 static inline void *dp_packet_tail(const struct dp_packet *);
 static inline void *dp_packet_end(const struct dp_packet *);
 
@@ -122,11 +121,11 @@ void *dp_packet_put_zeros(struct dp_packet *, size_t);
 void *dp_packet_put(struct dp_packet *, const void *, size_t);
 char *dp_packet_put_hex(struct dp_packet *, const char *s, size_t *n);
 void dp_packet_reserve(struct dp_packet *, size_t);
-void dp_packet_reserve_with_tailroom(struct dp_packet *b, size_t headroom,
-                                  size_t tailroom);
-void *dp_packet_push_uninit(struct dp_packet *b, size_t);
+void dp_packet_reserve_with_tailroom(struct dp_packet *, size_t headroom,
+                                     size_t tailroom);
+void *dp_packet_push_uninit(struct dp_packet *, size_t);
 void *dp_packet_push_zeros(struct dp_packet *, size_t);
-void *dp_packet_push(struct dp_packet *b, const void *, size_t);
+void *dp_packet_push(struct dp_packet *, const void *, size_t);
 
 static inline size_t dp_packet_headroom(const struct dp_packet *);
 static inline size_t dp_packet_tailroom(const struct dp_packet *);
@@ -141,20 +140,13 @@ static inline void *dp_packet_try_pull(struct dp_packet *, size_t);
 void *dp_packet_steal_data(struct dp_packet *);
 
 char *dp_packet_to_string(const struct dp_packet *, size_t maxbytes);
-static inline bool dp_packet_equal(const struct dp_packet *, const struct dp_packet *);
+static inline bool dp_packet_equal(const struct dp_packet *,
+                                   const struct dp_packet *);
 
 
-/* Returns a pointer that may be passed to free() to accomplish the same thing
- * as dp_packet_uninit(b).  The return value is a null pointer if dp_packet_uninit()
- * would not free any memory. */
-static inline void *dp_packet_get_uninit_pointer(struct dp_packet *b)
-{
-    /* XXX: If 'source' is DPBUF_DPDK memory gets leaked! */
-    return b && b->source == DPBUF_MALLOC ? dp_packet_base(b) : NULL;
-}
-
 /* Frees memory that 'b' points to, as well as 'b' itself. */
-static inline void dp_packet_delete(struct dp_packet *b)
+static inline void
+dp_packet_delete(struct dp_packet *b)
 {
     if (b) {
         if (b->source == DPBUF_DPDK) {
@@ -171,52 +163,59 @@ static inline void dp_packet_delete(struct dp_packet *b)
 
 /* If 'b' contains at least 'offset + size' bytes of data, returns a pointer to
  * byte 'offset'.  Otherwise, returns a null pointer. */
-static inline void *dp_packet_at(const struct dp_packet *b, size_t offset,
-                              size_t size)
+static inline void *
+dp_packet_at(const struct dp_packet *b, size_t offset, size_t size)
 {
-    return offset + size <= dp_packet_size(b) ? (char *) dp_packet_data(b) + offset : NULL;
+    return offset + size <= dp_packet_size(b)
+           ? (char *) dp_packet_data(b) + offset
+           : NULL;
 }
 
 /* Returns a pointer to byte 'offset' in 'b', which must contain at least
  * 'offset + size' bytes of data. */
-static inline void *dp_packet_at_assert(const struct dp_packet *b, size_t offset,
-                                     size_t size)
+static inline void *
+dp_packet_at_assert(const struct dp_packet *b, size_t offset, size_t size)
 {
     ovs_assert(offset + size <= dp_packet_size(b));
     return ((char *) dp_packet_data(b)) + offset;
 }
 
 /* Returns a pointer to byte following the last byte of data in use in 'b'. */
-static inline void *dp_packet_tail(const struct dp_packet *b)
+static inline void *
+dp_packet_tail(const struct dp_packet *b)
 {
     return (char *) dp_packet_data(b) + dp_packet_size(b);
 }
 
 /* Returns a pointer to byte following the last byte allocated for use (but
  * not necessarily in use) in 'b'. */
-static inline void *dp_packet_end(const struct dp_packet *b)
+static inline void *
+dp_packet_end(const struct dp_packet *b)
 {
     return (char *) dp_packet_base(b) + dp_packet_get_allocated(b);
 }
 
 /* Returns the number of bytes of headroom in 'b', that is, the number of bytes
  * of unused space in dp_packet 'b' before the data that is in use.  (Most
- * commonly, the data in a dp_packet is at its beginning, and thus the dp_packet's
- * headroom is 0.) */
-static inline size_t dp_packet_headroom(const struct dp_packet *b)
+ * commonly, the data in a dp_packet is at its beginning, and thus the
+ * dp_packet's headroom is 0.) */
+static inline size_t
+dp_packet_headroom(const struct dp_packet *b)
 {
-    return (char*)dp_packet_data(b) - (char*)dp_packet_base(b);
+    return (char *) dp_packet_data(b) - (char *) dp_packet_base(b);
 }
 
-/* Returns the number of bytes that may be appended to the tail end of dp_packet
- * 'b' before the dp_packet must be reallocated. */
-static inline size_t dp_packet_tailroom(const struct dp_packet *b)
+/* Returns the number of bytes that may be appended to the tail end of
+ * dp_packet 'b' before the dp_packet must be reallocated. */
+static inline size_t
+dp_packet_tailroom(const struct dp_packet *b)
 {
-    return (char*)dp_packet_end(b) - (char*)dp_packet_tail(b);
+    return (char *) dp_packet_end(b) - (char *) dp_packet_tail(b);
 }
 
 /* Clears any data from 'b'. */
-static inline void dp_packet_clear(struct dp_packet *b)
+static inline void
+dp_packet_clear(struct dp_packet *b)
 {
     dp_packet_set_data(b, dp_packet_base(b));
     dp_packet_set_size(b, 0);
@@ -224,11 +223,12 @@ static inline void dp_packet_clear(struct dp_packet *b)
 
 /* Removes 'size' bytes from the head end of 'b', which must contain at least
  * 'size' bytes of data.  Returns the first byte of data removed. */
-static inline void *dp_packet_pull(struct dp_packet *b, size_t size)
+static inline void *
+dp_packet_pull(struct dp_packet *b, size_t size)
 {
     void *data = dp_packet_data(b);
     ovs_assert(dp_packet_size(b) - dp_packet_l2_pad_size(b) >= size);
-    dp_packet_set_data(b, (char*)dp_packet_data(b) + size);
+    dp_packet_set_data(b, (char *) dp_packet_data(b) + size);
     dp_packet_set_size(b, dp_packet_size(b) - size);
     return data;
 }
@@ -236,28 +236,32 @@ static inline void *dp_packet_pull(struct dp_packet *b, size_t size)
 /* If 'b' has at least 'size' bytes of data, removes that many bytes from the
  * head end of 'b' and returns the first byte removed.  Otherwise, returns a
  * null pointer without modifying 'b'. */
-static inline void *dp_packet_try_pull(struct dp_packet *b, size_t size)
+static inline void *
+dp_packet_try_pull(struct dp_packet *b, size_t size)
 {
     return dp_packet_size(b) - dp_packet_l2_pad_size(b) >= size
         ? dp_packet_pull(b, size) : NULL;
 }
 
-static inline bool dp_packet_equal(const struct dp_packet *a, const struct dp_packet *b)
+static inline bool
+dp_packet_equal(const struct dp_packet *a, const struct dp_packet *b)
 {
     return dp_packet_size(a) == dp_packet_size(b) &&
-           memcmp(dp_packet_data(a), dp_packet_data(b), dp_packet_size(a)) == 0;
+           !memcmp(dp_packet_data(a), dp_packet_data(b), dp_packet_size(a));
 }
 
 /* Get the start of the Ethernet frame.  'l3_ofs' marks the end of the l2
  * headers, so return NULL if it is not set. */
-static inline void * dp_packet_l2(const struct dp_packet *b)
+static inline void *
+dp_packet_l2(const struct dp_packet *b)
 {
     return (b->l3_ofs != UINT16_MAX) ? dp_packet_data(b) : NULL;
 }
 
 /* Resets all layer offsets.  'l3' offset must be set before 'l2' can be
  * retrieved. */
-static inline void dp_packet_reset_offsets(struct dp_packet *b)
+static inline void
+dp_packet_reset_offsets(struct dp_packet *b)
 {
     b->l2_pad_size = 0;
     b->l2_5_ofs = UINT16_MAX;
@@ -265,56 +269,65 @@ static inline void dp_packet_reset_offsets(struct dp_packet *b)
     b->l4_ofs = UINT16_MAX;
 }
 
-static inline uint8_t dp_packet_l2_pad_size(const struct dp_packet *b)
+static inline uint8_t
+dp_packet_l2_pad_size(const struct dp_packet *b)
 {
     return b->l2_pad_size;
 }
 
-static inline void dp_packet_set_l2_pad_size(struct dp_packet *b, uint8_t pad_size)
+static inline void
+dp_packet_set_l2_pad_size(struct dp_packet *b, uint8_t pad_size)
 {
     ovs_assert(pad_size <= dp_packet_size(b));
     b->l2_pad_size = pad_size;
 }
 
-static inline void * dp_packet_l2_5(const struct dp_packet *b)
+static inline void *
+dp_packet_l2_5(const struct dp_packet *b)
 {
     return b->l2_5_ofs != UINT16_MAX
            ? (char *) dp_packet_data(b) + b->l2_5_ofs
            : NULL;
 }
 
-static inline void dp_packet_set_l2_5(struct dp_packet *b, void *l2_5)
+static inline void
+dp_packet_set_l2_5(struct dp_packet *b, void *l2_5)
 {
     b->l2_5_ofs = l2_5
                   ? (char *) l2_5 - (char *) dp_packet_data(b)
                   : UINT16_MAX;
 }
 
-static inline void * dp_packet_l3(const struct dp_packet *b)
+static inline void *
+dp_packet_l3(const struct dp_packet *b)
 {
     return b->l3_ofs != UINT16_MAX
            ? (char *) dp_packet_data(b) + b->l3_ofs
            : NULL;
 }
 
-static inline void dp_packet_set_l3(struct dp_packet *b, void *l3)
+static inline void
+dp_packet_set_l3(struct dp_packet *b, void *l3)
 {
     b->l3_ofs = l3 ? (char *) l3 - (char *) dp_packet_data(b) : UINT16_MAX;
 }
 
-static inline void * dp_packet_l4(const struct dp_packet *b)
+static inline void *
+dp_packet_l4(const struct dp_packet *b)
 {
     return b->l4_ofs != UINT16_MAX
            ? (char *) dp_packet_data(b) + b->l4_ofs
            : NULL;
 }
 
-static inline void dp_packet_set_l4(struct dp_packet *b, void *l4)
+static inline void
+dp_packet_set_l4(struct dp_packet *b, void *l4)
 {
     b->l4_ofs = l4 ? (char *) l4 - (char *) dp_packet_data(b) : UINT16_MAX;
 }
 
-static inline size_t dp_packet_l4_size(const struct dp_packet *b)
+static inline size_t
+dp_packet_l4_size(const struct dp_packet *b)
 {
     return b->l4_ofs != UINT16_MAX
         ? (const char *)dp_packet_tail(b) - (const char *)dp_packet_l4(b)
@@ -322,7 +335,8 @@ static inline size_t dp_packet_l4_size(const struct dp_packet *b)
         : 0;
 }
 
-static inline const void *dp_packet_get_tcp_payload(const struct dp_packet *b)
+static inline const void *
+dp_packet_get_tcp_payload(const struct dp_packet *b)
 {
     size_t l4_size = dp_packet_l4_size(b);
 
@@ -337,25 +351,29 @@ static inline const void *dp_packet_get_tcp_payload(const struct dp_packet *b)
     return NULL;
 }
 
-static inline const void *dp_packet_get_udp_payload(const struct dp_packet *b)
+static inline const void *
+dp_packet_get_udp_payload(const struct dp_packet *b)
 {
     return OVS_LIKELY(dp_packet_l4_size(b) >= UDP_HEADER_LEN)
         ? (const char *)dp_packet_l4(b) + UDP_HEADER_LEN : NULL;
 }
 
-static inline const void *dp_packet_get_sctp_payload(const struct dp_packet *b)
+static inline const void *
+dp_packet_get_sctp_payload(const struct dp_packet *b)
 {
     return OVS_LIKELY(dp_packet_l4_size(b) >= SCTP_HEADER_LEN)
         ? (const char *)dp_packet_l4(b) + SCTP_HEADER_LEN : NULL;
 }
 
-static inline const void *dp_packet_get_icmp_payload(const struct dp_packet *b)
+static inline const void *
+dp_packet_get_icmp_payload(const struct dp_packet *b)
 {
     return OVS_LIKELY(dp_packet_l4_size(b) >= ICMP_HEADER_LEN)
         ? (const char *)dp_packet_l4(b) + ICMP_HEADER_LEN : NULL;
 }
 
-static inline const void *dp_packet_get_nd_payload(const struct dp_packet *b)
+static inline const void *
+dp_packet_get_nd_payload(const struct dp_packet *b)
 {
     return OVS_LIKELY(dp_packet_l4_size(b) >= ND_MSG_LEN)
         ? (const char *)dp_packet_l4(b) + ND_MSG_LEN : NULL;
@@ -364,22 +382,26 @@ static inline const void *dp_packet_get_nd_payload(const struct dp_packet *b)
 #ifdef DPDK_NETDEV
 BUILD_ASSERT_DECL(offsetof(struct dp_packet, mbuf) == 0);
 
-static inline void * dp_packet_base(const struct dp_packet *b)
+static inline void *
+dp_packet_base(const struct dp_packet *b)
 {
     return b->mbuf.buf_addr;
 }
 
-static inline void dp_packet_set_base(struct dp_packet *b, void *d)
+static inline void
+dp_packet_set_base(struct dp_packet *b, void *d)
 {
     b->mbuf.buf_addr = d;
 }
 
-static inline uint32_t dp_packet_size(const struct dp_packet *b)
+static inline uint32_t
+dp_packet_size(const struct dp_packet *b)
 {
     return b->mbuf.pkt_len;
 }
 
-static inline void dp_packet_set_size(struct dp_packet *b, uint32_t v)
+static inline void
+dp_packet_set_size(struct dp_packet *b, uint32_t v)
 {
     /* netdev-dpdk does not currently support segmentation; consequently, for
      * all intents and purposes, 'data_len' (16 bit) and 'pkt_len' (32 bit) may
@@ -388,102 +410,112 @@ static inline void dp_packet_set_size(struct dp_packet *b, uint32_t v)
      * On the datapath, it is expected that the size of packets
      * (and thus 'v') will always be <= UINT16_MAX; this means that there is no
      * loss of accuracy in assigning 'v' to 'data_len'.
-     *
-     * However, control ofpbufs may well be larger than UINT16_MAX (i.e. 'v' >
-     * UINT16_MAX); even though the value is truncated when assigned to
-     * 'data_len', loss of accuracy is avoided in this situation by using
-     * 'pkt_len' to represent the packet size.
      */
     b->mbuf.data_len = (uint16_t)v;  /* Current seg length. */
     b->mbuf.pkt_len = v;             /* Total length of all segments linked to
                                       * this segment. */
-
 }
 
-static inline uint16_t __packet_data(const struct dp_packet *b)
+static inline uint16_t
+__packet_data(const struct dp_packet *b)
 {
     return b->mbuf.data_off;
 }
 
-static inline void __packet_set_data(struct dp_packet *b, uint16_t v)
+static inline void
+__packet_set_data(struct dp_packet *b, uint16_t v)
 {
     b->mbuf.data_off = v;
 }
 
-static inline uint16_t dp_packet_get_allocated(const struct dp_packet *b)
+static inline uint16_t
+dp_packet_get_allocated(const struct dp_packet *b)
 {
     return b->mbuf.buf_len;
 }
 
-static inline void dp_packet_set_allocated(struct dp_packet *b, uint16_t s)
+static inline void
+dp_packet_set_allocated(struct dp_packet *b, uint16_t s)
 {
     b->mbuf.buf_len = s;
 }
 #else
-static inline void * dp_packet_base(const struct dp_packet *b)
+static inline void *
+dp_packet_base(const struct dp_packet *b)
 {
     return b->base_;
 }
 
-static inline void dp_packet_set_base(struct dp_packet *b, void *d)
+static inline void
+dp_packet_set_base(struct dp_packet *b, void *d)
 {
     b->base_ = d;
 }
 
-static inline uint32_t dp_packet_size(const struct dp_packet *b)
+static inline uint32_t
+dp_packet_size(const struct dp_packet *b)
 {
     return b->size_;
 }
 
-static inline void dp_packet_set_size(struct dp_packet *b, uint32_t v)
+static inline void
+dp_packet_set_size(struct dp_packet *b, uint32_t v)
 {
     b->size_ = v;
 }
 
-static inline uint16_t __packet_data(const struct dp_packet *b)
+static inline uint16_t
+__packet_data(const struct dp_packet *b)
 {
     return b->data_ofs;
 }
 
-static inline void __packet_set_data(struct dp_packet *b, uint16_t v)
+static inline void
+__packet_set_data(struct dp_packet *b, uint16_t v)
 {
     b->data_ofs = v;
 }
 
-static inline uint16_t dp_packet_get_allocated(const struct dp_packet *b)
+static inline uint16_t
+dp_packet_get_allocated(const struct dp_packet *b)
 {
     return b->allocated_;
 }
 
-static inline void dp_packet_set_allocated(struct dp_packet *b, uint16_t s)
+static inline void
+dp_packet_set_allocated(struct dp_packet *b, uint16_t s)
 {
     b->allocated_ = s;
 }
 #endif
 
-static inline void * dp_packet_data(const struct dp_packet *b)
+static inline void *
+dp_packet_data(const struct dp_packet *b)
 {
-    return __packet_data(b) != UINT16_MAX ?
-           (char *)dp_packet_base(b) + __packet_data(b) : NULL;
+    return __packet_data(b) != UINT16_MAX
+           ? (char *) dp_packet_base(b) + __packet_data(b) : NULL;
 }
 
-static inline void dp_packet_set_data(struct dp_packet *b, void *data)
+static inline void
+dp_packet_set_data(struct dp_packet *b, void *data)
 {
     if (data) {
-        __packet_set_data(b, (char *)data - (char *)dp_packet_base(b));
+        __packet_set_data(b, (char *) data - (char *) dp_packet_base(b));
     } else {
         __packet_set_data(b, UINT16_MAX);
     }
 }
 
-static inline void dp_packet_reset_packet(struct dp_packet *b, int off)
+static inline void
+dp_packet_reset_packet(struct dp_packet *b, int off)
 {
     dp_packet_set_size(b, dp_packet_size(b) - off);
     dp_packet_set_data(b, ((unsigned char *) dp_packet_data(b) + off));
     b->l2_5_ofs = b->l3_ofs = b->l4_ofs = UINT16_MAX;
 }
 
-static inline uint32_t dp_packet_get_rss_hash(struct dp_packet *p)
+static inline uint32_t
+dp_packet_get_rss_hash(struct dp_packet *p)
 {
 #ifdef DPDK_NETDEV
     return p->mbuf.hash.rss;
@@ -492,8 +524,8 @@ static inline uint32_t dp_packet_get_rss_hash(struct dp_packet *p)
 #endif
 }
 
-static inline void dp_packet_set_rss_hash(struct dp_packet *p,
-                                           uint32_t hash)
+static inline void
+dp_packet_set_rss_hash(struct dp_packet *p, uint32_t hash)
 {
 #ifdef DPDK_NETDEV
     p->mbuf.hash.rss = hash;
-- 
2.1.4

